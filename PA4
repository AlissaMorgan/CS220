
import sys

coins = [1, 5, 10, 25]

#This third python programming assignment, PA3, is about counting.
# You will write two functions partitions(n,k) that counts in how many ways
# n distinct elements can be grouped into k (non empty) partitions, and mkCh(a,c)
# that counts in how many ways amount a can be paid with coins {1,5,10,25}.
# Both algorithms are discussed in lecture 15: counting.

#ex)   n: 3 k: 2 partitions: 3
#   amount: 32 coins: [1, 5, 10, 25] ways: 18

def partitions(n, k):
    """
     pre 0<k<=n, n>0
     post return the number of ways k partitions
           can be formed out of n distinct elements
    """

    # if k==n or k==1 :
    if(k == n or k == 1):
        return 1
    #  there is only one way to form partitions
    # else :
    else:
        return ( k * partitions(n - 1, k) ) + partitions(n - 1, k - 1)


    # select an element a, and
    #   either
    #     form k partitions with the rest of the elements
    #     and let a join one of these k groups
    #   or
    #     let a form its own partition, and
    #     form k-1 partitions with the rest

def mkCh(a, c):
    t = 0
    """
     given coin set {1,5,10,25} count how many ways we can pay amount a,
     c indicates which coin is considered first.  c starts as the index
     of the last coin value (len(coins)-1)
    """
    if(c == 0):
        return 1
    else:
        for x in range(a // coins[c] + 1):
            t += mkCh(a - x * coins[c], c - 1)
    return t


if __name__ == "__main__":
    # partititions
    d = len(sys.argv) > 3
    n = int(sys.argv[1])
    k = int(sys.argv[2])
    p = partitions(n, k)
    print("n:", n, "k:", k, "partitions:", p)

    # make change
    c = len(coins) - 1
    a = 10 * n + k
    t = 0
    ways = mkCh(a, c)
    print("amount:", a, "coins:", coins, "ways:", ways)

